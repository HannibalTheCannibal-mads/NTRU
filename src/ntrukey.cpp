#include "ntru/ntrukey.hpp"
#include "ntru/ntruparams.hpp"
#include "ntru/convmodq.hpp"
#include "ntru/convpoly.hpp"
#include <iostream>
#include <vector>
#include <random>
#include <algorithm>
#include <utility>
#include <iostream>
// Constructor
NTRUKey::NTRUKey(const NTRUParams& ring_param, const ConvModQ* f_, const ConvModQ* g_)
    : ring(ring_param)
{
    // Generate f if not provided
    if (f_ == nullptr) {
        f = randomTrinary(ring.d_f + 1, ring.d_f);
    } else {
        f = *f_;
    }

    // Generate g if not provided
    if (g_ == nullptr) {
        g = randomTrinary(ring.d_g, ring.d_g);
    } else {
        g = *g_;
    }

    // Compute inverses
    finvq = f.inverse();
    while (finvq.coef.empty()) {
        std::cout << "finv was None. Retrying." << std::endl;
        f = randomTrinary(ring.d_f + 1, ring.d_f);
        finvq = f.inverse();
    }

    finvp = ConvModQ(f.centerLift().coef, ring.p, ring.N).inverse();
    while (finvq.coef.empty() || finvp.coef.empty()) {
        std::cout << "finv was None. Retrying." << std::endl;
        f = randomTrinary(ring.d_f + 1, ring.d_f);
        finvq = f.inverse();
        if (finvq.coef.empty()) continue;
        finvp = ConvModQ(f.coef, ring.p, ring.N).inverse();
    }

    h = finvq * g;
}

// Random trinary polynomial
ConvModQ NTRUKey::randomTrinary(int d1, int d2) {
    std::vector<int> arr;
    arr.insert(arr.end(), d1, 1);
    arr.insert(arr.end(), d2, -1);
    arr.insert(arr.end(), ring.N - d1 - d2, 0);

    // Shuffle using random device
    std::random_device rd;
    std::mt19937 g(rd());
    std::shuffle(arr.begin(), arr.end(), g);

    return ConvModQ(arr, ring.q, ring.N);
}

// Public key getter
std::pair<NTRUParams, ConvModQ> NTRUKey::publicKey() const {
    return std::make_pair(ring, h);
}
// This code defines the NTRUKey class, which represents a key in the NTRU encryption algorithm.
// It includes methods for generating random trinary polynomials, computing inverses etc.
/*
int main() {
    try {
        // Create NTRU parameters (for example, 128 bits, speed)
        NTRUParams params(128, "speed");

        // Generate a keypair
        NTRUKey key(params);

        // Print private key info
        std::cout << "NTRU Private Key Parameters:" << std::endl;
        std::cout << "N = " << key.ring.N << ", q = " << key.ring.q << ", p = " << key.ring.p << std::endl;
        std::cout << "f = " << key.f << std::endl;
        std::cout << "g = " << key.g << std::endl;
        std::cout << "finvq = " << key.finvq << std::endl;
        std::cout << "finvp = " << key.finvp << std::endl;

        // Print public key
        auto pub = key.publicKey();
        std::cout << "\nNTRU Public Key:" << std::endl;
        std::cout << "N = " << pub.first.N << ", q = " << pub.first.q << ", p = " << pub.first.p << std::endl;
        std::cout << "h = " << pub.second << std::endl;
    } catch (const std::exception& ex) {
        std::cerr << "Error: " << ex.what() << std::endl;
        return 1;
    }
    return 0;
}*/
/*Sample output:
kevin_abraham@kevinabraham:~/NTRU$ g++ -Iinclude src/ntrukey.cpp src/ntruparams.cpp src/convmodq.cpp src/convpoly.cpp src/polymodq.cpp src/utils.cpp -lssl -lcrypto -o bin/ntrukey_test
kevin_abraham@kevinabraham:~/NTRU$ ./bin/ntrukey_test
NTRU Private Key Parameters:
N = 761, q = 2048, p = 3
f = ConvModQ([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2047, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 1, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 2047, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 1, 0, 2047, 2047, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2047, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 1, 0, 2047, 0, 2047, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 1, 0, 0, 2047, 0, 0, 1, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 2047, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2047, 0, 0, 0, 0, 2047, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2047, 2047, 0, 2047, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 2048)
g = ConvModQ([1, 1, 0, 1, 0, 0, 0, 0, 2047, 2047, 0, 1, 0, 1, 2047, 1, 0, 2047, 0, 2047, 0, 1, 0, 2047, 0, 2047, 2047, 2047, 1, 1, 1, 2047, 0, 1, 0, 2047, 0, 1, 2047, 1, 0, 2047, 0, 2047, 2047, 0, 2047, 0, 2047, 2047, 1, 1, 2047, 0, 1, 0, 0, 0, 2047, 1, 1, 2047, 0, 0, 0, 1, 1, 1, 0, 0, 2047, 1, 2047, 2047, 0, 1, 2047, 2047, 0, 2047, 1, 0, 2047, 2047, 1, 1, 2047, 2047, 2047, 1, 2047, 2047, 1, 1, 0, 1, 2047, 1, 0, 2047, 0, 2047, 2047, 0, 0, 1, 2047, 1, 2047, 1, 1, 0, 1, 0, 2047, 2047, 1, 2047, 2047, 2047, 0, 1, 2047, 0, 2047, 2047, 0, 2047, 2047, 0, 2047, 0, 2047, 1, 2047, 2047, 1, 0, 1, 2047, 2047, 0, 1, 1, 1, 0, 1, 0, 0, 2047, 1, 1, 1, 2047, 2047, 0, 0, 1, 1, 0, 1, 1, 1, 1, 2047, 2047, 1, 1, 0, 0, 1, 0, 0, 1, 2047, 0, 0, 0, 2047, 2047, 1, 2047, 2047, 0, 0, 1, 1, 0, 2047, 0, 2047, 0, 1, 0, 0, 0, 2047, 0, 1, 2047, 2047, 2047, 2047, 2047, 2047, 1, 0, 2047, 2047, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 2047, 2047, 0, 2047, 1, 0, 0, 2047, 1, 0, 2047, 0, 1, 0, 1, 2047, 1, 1, 2047, 2047, 1, 0, 1, 1, 1, 1, 2047, 0, 0, 1, 1, 1, 1, 1, 0, 2047, 1, 0, 2047, 2047, 0, 2047, 1, 1, 1, 0, 2047, 1, 1, 2047, 1, 2047, 1, 1, 0, 0, 2047, 1, 2047, 1, 1, 2047, 2047, 2047, 2047, 0, 0, 2047, 1, 1, 0, 0, 1, 0, 2047, 0, 0, 1, 0, 2047, 1, 2047, 2047, 0, 2047, 2047, 1, 0, 2047, 1, 0, 0, 1, 2047, 2047, 1, 1, 1, 2047, 0, 2047, 0, 0, 0, 2047, 2047, 1, 2047, 2047, 1, 2047, 2047, 0, 0, 0, 2047, 0, 1, 2047, 0, 2047, 2047, 1, 1, 2047, 2047, 1, 0, 1, 1, 1, 0, 2047, 2047, 1, 1, 1, 2047, 0, 1, 0, 0, 1, 1, 1, 2047, 1, 0, 0, 0, 1, 0, 2047, 0, 0, 2047, 0, 1, 0, 1, 0, 2047, 1, 2047, 0, 2047, 0, 0, 2047, 0, 2047, 1, 0, 1, 0, 0, 2047, 0, 2047, 2047, 1, 2047, 2047, 1, 1, 0, 2047, 0, 2047, 2047, 2047, 2047, 0, 0, 1, 1, 0, 2047, 1, 0, 2047, 1, 0, 1, 2047, 2047, 2047, 2047, 2047, 2047, 2047, 0, 1, 0, 1, 0, 0, 0, 2047, 2047, 1, 0, 2047, 0, 1, 2047, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 0, 1, 2047, 1, 2047, 1, 2047, 2047, 1, 2047, 1, 2047, 0, 2047, 2047, 0, 0, 0, 1, 1, 2047, 1, 1, 0, 1, 0, 2047, 2047, 1, 1, 0, 2047, 1, 1, 2047, 1, 0, 1, 0, 0, 0, 0, 2047, 1, 1, 1, 2047, 1, 2047, 1, 2047, 1, 1, 1, 0, 2047, 2047, 2047, 0, 0, 0, 1, 0, 2047, 0, 1, 2047, 0, 0, 2047, 1, 1, 1, 0, 2047, 2047, 1, 1, 0, 2047, 0, 0, 0, 0, 0, 2047, 0, 1, 0, 1, 1, 0, 0, 2047, 1, 0, 0, 1, 2047, 1, 0, 1, 0, 2047, 2047, 1, 2047, 2047, 0, 0, 2047, 0, 0, 0, 2047, 1, 0, 2047, 0, 2047, 1, 1, 0, 1, 0, 2047, 2047, 0, 1, 0, 0, 2047, 2047, 0, 2047, 1, 2047, 0, 0, 2047, 1, 1, 2047, 1, 0, 0, 1, 1, 0, 2047, 1, 1, 2047, 2047, 0, 1, 0, 0, 0, 2047, 2047, 0, 0, 2047, 2047, 0, 0, 1, 1, 0, 1, 0, 2047, 2047, 2047, 1, 1, 1, 2047, 2047, 1, 0, 1, 1, 0, 1, 1, 1, 2047, 2047, 0, 2047, 1, 0, 2047, 1, 0, 1, 0, 1, 1, 0, 2047, 1, 2047, 0, 1, 0, 1, 1, 0, 1, 0, 2047, 0, 2047, 0, 1, 0, 2047, 2047, 2047, 1, 2047, 1, 1, 1, 1, 0, 2047, 1, 2047, 0, 2047, 1, 0, 2047, 0, 0, 2047, 0, 0, 0, 0, 2047, 1, 2047, 0, 1, 0, 0, 1, 1, 2047, 1, 0, 2047, 0, 0, 1, 1, 2047, 2047, 0, 0, 2047, 2047, 1, 2047, 0, 2047, 1, 2047, 2047, 2047, 2047, 0, 2047, 0, 2047, 2047, 2047, 0, 1, 0, 2047, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 2047, 2047, 1, 1, 1, 0, 1, 1, 2047], 2048)
finvq = ConvModQ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 2048)
finvp = ConvModQ([1, 1, 2, 2, 0, 2, 1, 2, 2, 1, 0, 0, 0, 1, 0, 1, 1, 1, 2, 2, 0, 1, 0, 0, 0, 1, 0, 2, 1, 0, 2, 1, 2, 0, 2, 1, 2, 2, 1, 2, 2, 0, 2, 1, 2, 2, 2, 0, 1, 2, 1, 1, 0, 1, 2, 1, 0, 1, 2, 2, 2, 1, 0, 1, 2, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 2, 2, 0, 1, 1, 2, 2, 2, 1, 1, 2, 2, 0, 1, 2, 0, 2, 1, 2, 0, 1, 0, 2, 0, 1, 0, 0, 0, 1, 2, 2, 2, 1, 2, 0, 1, 0, 1, 1, 1, 2, 2, 0, 1, 1, 2, 2, 2, 1, 0, 2, 2, 0, 1, 1, 0, 2, 1, 0, 1, 2, 1, 1, 1, 2, 0, 2, 0, 1, 2, 0, 0, 2, 1, 0, 0, 1, 0, 1, 2, 2, 1, 0, 1, 1, 1, 2, 0, 0, 2, 0, 2, 0, 1, 1, 1, 0, 2, 2, 1, 1, 0, 1, 1, 1, 2, 0, 2, 0, 0, 1, 2, 1, 2, 0, 0, 2, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 2, 2, 2, 0, 0, 2, 0, 0, 1, 2, 1, 2, 0, 2, 1, 2, 0, 1, 1, 2, 2, 1, 2, 0, 1, 0, 0, 0, 0, 2, 1, 1, 2, 1, 0, 2, 0, 2, 1, 0, 0, 1, 2, 2, 1, 1, 2, 0, 0, 2, 2, 2, 0, 1, 1, 1, 1, 0, 2, 1, 1, 0, 0, 2, 0, 2, 2, 2, 1, 2, 0, 1, 0, 0, 2, 2, 1, 1, 2, 2, 0, 0, 1, 2, 0, 0, 0, 1, 0, 1, 0, 1, 1, 2, 1, 2, 2, 1, 1, 0, 1, 2, 0, 0, 2, 1, 0, 1, 0, 0, 2, 2, 0, 1, 2, 1, 2, 2, 1, 2, 1, 1, 1, 0, 1, 0, 0, 0, 1, 2, 0, 2, 0, 0, 0, 2, 0, 2, 2, 0, 1, 2, 1, 1, 1, 2, 0, 1, 2, 0, 0, 0, 2, 0, 0, 1, 1, 1, 2, 0, 0, 2, 2, 1, 2, 1, 2, 1, 0, 0, 0, 2, 1, 0, 2, 2, 0, 2, 1, 2, 0, 2, 2, 2, 1, 1, 1, 1, 2, 2, 0, 2, 2, 2, 2, 1, 2, 2, 2, 1, 0, 2, 2, 2, 0, 1, 2, 0, 2, 0, 1, 2, 2, 0, 2, 0, 0, 1, 2, 2, 2, 2, 0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 2, 0, 2, 0, 0, 1, 2, 1, 2, 1, 1, 2, 2, 2, 0, 1, 0, 1, 1, 2, 0, 2, 0, 1, 1, 2, 0, 1, 1, 1, 1, 2, 1, 0, 0, 0, 0, 1, 0, 0, 2, 2, 0, 1, 0, 0, 1, 2, 2, 2, 0, 2, 2, 0, 1, 2, 0, 2, 1, 0, 0, 1, 2, 0, 2, 1, 2, 1, 2, 0, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 2, 0, 2, 2, 1, 2, 1, 1, 0, 1, 0, 1, 0, 1, 2, 2, 0, 1, 1, 0, 1, 0, 1, 2, 2, 0, 2, 1, 1, 2, 2, 1, 0, 0, 1, 0, 0, 1, 1, 2, 0, 0, 2, 0, 2, 1, 2, 2, 2, 0, 2, 0, 2, 2, 0, 1, 2, 1, 2, 2, 2, 2, 2, 2, 0, 1, 2, 1, 2, 2, 1, 0, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 2, 1, 1, 1, 2, 2, 0, 0, 2, 1, 1, 0, 0, 2, 1, 2, 0, 1, 2, 2, 0, 1, 2, 1, 0, 0, 2, 2, 1, 1, 1, 2, 0, 0, 0, 1, 2, 0, 0, 2, 0, 1, 1, 2, 1, 1, 2, 0, 1, 0, 2, 0, 1, 0, 1, 0, 2, 2, 0, 1, 1, 2, 2, 0, 2, 0, 0, 2, 0, 0, 0, 2, 0, 0, 0, 1, 2, 2, 2, 0, 2, 2, 1, 0, 0, 1, 0, 2, 0, 2, 0, 2, 1, 2, 0, 2, 0, 2, 2, 1, 2, 1, 2, 0, 2, 1, 1, 2, 0, 2, 0, 1, 0, 1, 1, 2, 2, 0, 0, 0, 2, 2, 2, 1, 1, 2, 2, 0, 1, 2, 2, 1, 2, 0, 1, 1, 1, 0, 2, 1, 2, 2, 2, 0, 0, 0, 1, 2, 1, 0, 1, 2, 1, 0, 0, 2, 2, 2, 1], 3)

NTRU Public Key:
N = 761, q = 2048, p = 3
h = ConvModQ([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 2048)
kevin_abraham@kevinabraham:~/NTRU$ 
*/